const { Markup } = require('telegraf');
const logger = require('../core/logger');
const { escapeMarkdownV2 } = require('../utils/escapeMarkdown');
const BroadcastService = require('../services/broadcastService');
const AuditService = require('../services/auditService');
const UserManagementService = require('../services/userManagementService');
const SystemManagementService = require('../services/systemManagementService');

// IDs dos admins autorizados
const ADMIN_IDS = process.env.ADMIN_TELEGRAM_IDS ?
    process.env.ADMIN_TELEGRAM_IDS.split(',').map(id => parseInt(id.trim())) :
    [];

logger.info(`[AdminCommands] Admin IDs configurados: ${ADMIN_IDS.join(', ')}`);

/**
 * Verifica se usu√°rio √© admin
 */
const isAdmin = (userId) => {
    const userIdNum = typeof userId === 'string' ? parseInt(userId) : userId;
    return ADMIN_IDS.includes(userIdNum);
};

/**
 * Registra comandos administrativos completos
 */
const registerAdminCommands = (bot, dbPool, redisClient) => {
    // Inicializar servi√ßos
    const broadcastService = new BroadcastService(bot, dbPool);
    const auditService = new AuditService(dbPool);
    const userManagementService = new UserManagementService(dbPool, auditService);
    const systemManagementService = new SystemManagementService(dbPool, redisClient, bot);

    // Estado das opera√ß√µes ativas
    const activeStates = new Map();

    // Middleware para verificar admin em callbacks
    const requireAdmin = async (ctx, next) => {
        if (!isAdmin(ctx.from.id)) {
            await ctx.answerCbQuery('‚õî Acesso negado');
            return;
        }
        return next();
    };

    // ========================================
    // COMANDO PRINCIPAL /admin
    // ========================================
    bot.command('admin', async (ctx) => {
        try {
            const userId = ctx.from.id;

            if (!isAdmin(userId)) {
                logger.info(`[Admin] Acesso negado para ${userId}`);
                return ctx.reply('‚õî Comando restrito a administradores.');
            }

            // Registrar a√ß√£o de login
            await auditService.logAdminAction({
                adminId: userId,
                adminUsername: ctx.from.username,
                actionType: AuditService.ActionTypes.ADMIN_LOGIN,
                actionDescription: 'Admin acessou painel administrativo'
            });

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üì¢ Broadcast', 'adm_broadcast')],
                [Markup.button.callback('üë• Usu√°rios', 'adm_users')],
                [Markup.button.callback('üîß Sistema', 'adm_system')],
                [Markup.button.callback('üìä Estat√≠sticas', 'adm_stats')],
                [Markup.button.callback('üìú Auditoria', 'adm_audit')]
            ]);

            await ctx.reply(
                'üîß *Painel Administrativo*\n\n' +
                'Bem-vindo ao sistema de administra√ß√£o do Atlas Bridge.\n\n' +
                'Selecione uma op√ß√£o:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Admin] Erro no comando: ${error.message}`);
            await ctx.reply('‚ùå Erro ao abrir painel administrativo.');
        }
    });

    // ========================================
    // MENU DE BROADCAST
    // ========================================
    bot.action('adm_broadcast', requireAdmin, async (ctx) => {
        try {
            const stats = await broadcastService.getBroadcastStats();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìù Nova Mensagem', 'bcast_new')],
                [Markup.button.callback('üéØ Segmentado', 'bcast_segmented')],
                [Markup.button.callback('üß™ Teste', 'bcast_test')],
                [Markup.button.callback('üìä Estat√≠sticas', 'bcast_stats')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(
                `üì¢ *Broadcast*\n\n` +
                `üìä *Resumo:*\n` +
                `‚îú Usu√°rios ativos: ${stats.active_users}\n` +
                `‚îú Bloqueados: ${stats.blocked_users}\n` +
                `‚îî Verificados: ${stats.verified_users}\n\n` +
                `Escolha o tipo de broadcast:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Broadcast] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir menu');
        }
    });

    // ========================================
    // MENU DE USU√ÅRIOS
    // ========================================
    bot.action('adm_users', requireAdmin, async (ctx) => {
        try {
            const stats = await userManagementService.getUserStats();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîç Buscar Usu√°rio', 'user_search')],
                [Markup.button.callback('üî® Banir R√°pido', 'user_quick_ban')],
                [Markup.button.callback('üìã Listar Todos', 'user_list')],
                [Markup.button.callback('‚ö†Ô∏è Suspeitos', 'user_suspicious')],
                [Markup.button.callback('üö´ Banidos', 'user_banned')],
                [Markup.button.callback('‚úÖ Verificados', 'user_verified')],
                [Markup.button.callback('üì§ Exportar Dados', 'user_export')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(
                `üë• *Gerenciamento de Usu√°rios*\n\n` +
                `üìä *Estat√≠sticas:*\n` +
                `‚îú Total: ${stats.total_users}\n` +
                `‚îú Verificados: ${stats.verified_users}\n` +
                `‚îú Banidos: ${stats.banned_users}\n` +
                `‚îú Com carteira: ${stats.with_wallet}\n` +
                `‚îú Bloquearam bot: ${stats.bot_blocked}\n` +
                `‚îú Novos hoje: ${stats.new_today}\n` +
                `‚îú Ativos (7d): ${stats.active_week}\n` +
                `‚îî Volume total: R$ ${parseFloat(stats.total_volume || 0).toFixed(2)}\n\n` +
                `Selecione uma op√ß√£o:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Users] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar usu√°rios');
        }
    });

    // Listar usu√°rios com pagina√ß√£o
    bot.action(/user_list_(\d+)/, requireAdmin, async (ctx) => {
        try {
            const page = parseInt(ctx.match[1]);
            const limit = 10;
            const offset = page * limit;

            const result = await userManagementService.searchUsers({
                limit,
                offset,
                sortBy: 'created_at',
                sortOrder: 'DESC'
            });

            let message = `üë• *Lista de Usu√°rios (P√°gina ${page + 1})*\n\n`;

            for (const user of result.users) {
                const status = user.is_banned ? 'üö´' :
                              user.is_verified ? '‚úÖ' : '‚ö™';
                const wallet = user.liquid_address ? 'üí∞' : '';

                message += `${status} ${user.telegram_user_id} - @${user.telegram_username || 'sem_username'} ${wallet}\n`;
                message += `‚îú Nome: ${user.telegram_full_name || 'N/A'}\n`;
                message += `‚îú Rep: ${user.reputation_level} | Vol: R$ ${user.total_volume_brl}\n`;
                message += `‚îî Desde: ${new Date(user.created_at).toLocaleDateString('pt-BR')}\n\n`;
            }

            const totalPages = Math.ceil(result.total / limit);
            const buttons = [];

            // Navega√ß√£o
            const navButtons = [];
            if (page > 0) {
                navButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `user_list_${page - 1}`));
            }
            navButtons.push(Markup.button.callback(`${page + 1}/${totalPages}`, 'noop'));
            if (page < totalPages - 1) {
                navButtons.push(Markup.button.callback('‚û°Ô∏è', `user_list_${page + 1}`));
            }
            buttons.push(navButtons);

            buttons.push([Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]);

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard(buttons).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User List] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao listar usu√°rios');
        }
    });

    bot.action('user_list', requireAdmin, async (ctx) => {
        // Redirecionar para primeira p√°gina
        ctx.match = ['user_list_0', '0'];
        return bot.handleUpdate({ ...ctx.update, callback_query: { ...ctx.callbackQuery, data: 'user_list_0' } });
    });

    // Buscar usu√°rio espec√≠fico
    bot.action('user_search', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, { action: 'user_search' });

            await ctx.editMessageText(
                'üîç *Buscar Usu√°rio*\n\n' +
                'Envie o ID, username ou nome do usu√°rio que deseja buscar.\n\n' +
                'Exemplos:\n' +
                '‚Ä¢ ID: 123456789\n' +
                '‚Ä¢ Username: @usuario\n' +
                '‚Ä¢ Nome: Jo√£o Silva\n\n' +
                'Use /cancel para cancelar',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User Search] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para Banir R√°pido
    bot.action('user_quick_ban', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, { action: 'user_quick_ban' });

            await ctx.editMessageText(
                'üî® *Banir Usu√°rio R√°pido*\n\n' +
                'Digite qualquer um dos identificadores abaixo:\n\n' +
                '‚Ä¢ **Telegram ID:** 123456789\n' +
                '‚Ä¢ **Username:** @usuario\n' +
                '‚Ä¢ **Wallet Liquid:** bc1q...\n' +
                '‚Ä¢ **CPF:** 123.456.789-00\n\n' +
                'O sistema buscar√° automaticamente o usu√°rio.\n\n' +
                'Use /cancel para cancelar',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User Quick Ban] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // ========================================
    // MENU DE SISTEMA
    // ========================================
    bot.action('adm_system', requireAdmin, async (ctx) => {
        try {
            const status = await systemManagementService.getSystemStatus();
            const healthIcon = status.health === 'healthy' ? 'üü¢' :
                              status.health === 'degraded' ? 'üü°' : 'üî¥';

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìä Status Completo', 'sys_status')],
                [Markup.button.callback('üîÑ Limpar Cache', 'sys_cache')],
                [Markup.button.callback('üìà M√©tricas', 'sys_metrics')],
                [Markup.button.callback('üìú Logs', 'sys_logs')],
                [Markup.button.callback('üí¨ Msg P√≥s-Compra', 'sys_post_purchase')],
                [Markup.button.callback('üõ°Ô∏è Seguran√ßa', 'sys_security')],
                [Markup.button.callback('üîß Manuten√ß√£o', 'sys_maintenance')],
                [Markup.button.callback('üíæ Backups', 'sys_backup')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(
                `üîß *Gerenciamento do Sistema*\n\n` +
                `${healthIcon} *Status:* ${status.health}\n\n` +
                `üñ•Ô∏è *Aplica√ß√£o:*\n` +
                `‚îú Uptime: ${status.app.uptime.formatted}\n` +
                `‚îú Mem√≥ria: ${status.app.memory.heapUsed}MB / ${status.app.memory.heapTotal}MB\n` +
                `‚îî Ambiente: ${status.app.env}\n\n` +
                `üóÑÔ∏è *Banco de Dados:*\n` +
                `‚îú Status: ${status.database.status}\n` +
                `‚îî Lat√™ncia: ${status.database.latency}\n\n` +
                `üì° *Redis:*\n` +
                `‚îú Status: ${status.redis.status}\n` +
                `‚îî Lat√™ncia: ${status.redis.latency}\n\n` +
                `Selecione uma op√ß√£o:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin System] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar status');
        }
    });

    // Status completo do sistema
    bot.action('sys_status', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üìä Carregando status...');

            const status = await systemManagementService.getSystemStatus();

            let message = 'üìä *Status Completo do Sistema*\n\n';

            // App status
            message += 'üñ•Ô∏è *Aplica√ß√£o:*\n';
            message += `‚îú PID: ${status.app.pid}\n`;
            message += `‚îú Node: ${status.app.version}\n`;
            message += `‚îú Uptime: ${status.app.uptime.formatted}\n`;
            message += `‚îú Mem√≥ria RSS: ${status.app.memory.rss}MB\n`;
            message += `‚îú Heap: ${status.app.memory.heapUsed}/${status.app.memory.heapTotal}MB\n`;
            message += `‚îî Ambiente: ${status.app.env}\n\n`;

            // Database status
            message += 'üóÑÔ∏è *Banco de Dados:*\n';
            message += `‚îú Status: ${status.database.status}\n`;
            message += `‚îú Lat√™ncia: ${status.database.latency}\n`;
            message += `‚îú Tamanho: ${status.database.size}MB\n`;
            message += `‚îú Conex√µes: ${status.database.connections}\n`;
            message += `‚îî Pool: ${status.database.pool.idleCount}/${status.database.pool.totalCount}\n\n`;

            // Redis status
            message += 'üì° *Redis:*\n';
            message += `‚îú Status: ${status.redis.status}\n`;
            message += `‚îú Lat√™ncia: ${status.redis.latency}\n`;
            message += `‚îú Vers√£o: ${status.redis.version}\n`;
            message += `‚îú Chaves: ${status.redis.keys}\n`;
            message += `‚îú Mem√≥ria: ${status.redis.memory.used}MB\n`;
            message += `‚îî Clientes: ${status.redis.clients}\n\n`;

            // Server status
            message += 'üñ•Ô∏è *Servidor:*\n';
            message += `‚îú Host: ${status.server.hostname}\n`;
            message += `‚îú OS: ${status.server.platform} ${status.server.arch}\n`;
            message += `‚îú CPUs: ${status.server.cpus} (${status.server.cpuUsage} uso)\n`;
            message += `‚îú RAM: ${status.server.memory.used}/${status.server.memory.total}GB (${status.server.memory.percentage}%)\n`;
            message += `‚îú Load: ${status.server.loadAvg.join(', ')}\n`;
            message += `‚îî Uptime: ${status.server.uptime}\n`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ Atualizar', 'sys_status')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
            ]);

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        } catch (error) {
            logger.error(`[System Status] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar status');
        }
    });

    // Limpar cache
    bot.action('sys_cache', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üîÑ Limpando cache...');

            const keysDeleted = await systemManagementService.clearCache();

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: AuditService.ActionTypes.SYSTEM_CACHE_CLEARED,
                actionDescription: `Cache limpo: ${keysDeleted} chaves removidas`
            });

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
            ]);

            await ctx.editMessageText(
                `‚úÖ *Cache Limpo*\n\n` +
                `üóëÔ∏è ${keysDeleted} chaves removidas do Redis\n\n` +
                `O cache foi limpo com sucesso.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
        } catch (error) {
            logger.error(`[System Cache] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao limpar cache');
        }
    });

    // ========================================
    // MENU DE ESTAT√çSTICAS
    // ========================================
    bot.action('adm_stats', requireAdmin, async (ctx) => {
        try {
            const userStats = await userManagementService.getUserStats();
            const metrics = await systemManagementService.getPerformanceMetrics();

            const message =
                `üìä *Estat√≠sticas do Sistema*\n\n` +
                `üë• *Usu√°rios:*\n` +
                `‚îú Total: ${userStats.total_users}\n` +
                `‚îú Verificados: ${userStats.verified_users}\n` +
                `‚îú Com Carteira: ${userStats.with_wallet}\n` +
                `‚îú Banidos: ${userStats.banned_users}\n` +
                `‚îú Novos (30d): ${userStats.new_month}\n` +
                `‚îî Ativos (30d): ${userStats.active_month}\n\n` +
                `üí∞ *Transa√ß√µes:*\n` +
                `‚îú Total: ${metrics.transactions.total}\n` +
                `‚îú Confirmadas: ${metrics.transactions.confirmed}\n` +
                `‚îú Volume: R$ ${parseFloat(metrics.transactions.total_volume || 0).toFixed(2)}\n` +
                `‚îî M√©dia: R$ ${parseFloat(metrics.transactions.avg_amount || 0).toFixed(2)}\n\n` +
                `üì¢ *Broadcasts:*\n` +
                `‚îú Hoje: ${metrics.broadcasts.today}\n` +
                `‚îî Semana: ${metrics.broadcasts.week}\n\n` +
                `‚ö†Ô∏è *Erros:*\n` +
                `‚îú √öltimas 24h: ${metrics.errors.last24Hours}\n` +
                `‚îî √öltimos 7d: ${metrics.errors.last7Days}`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ Atualizar', 'adm_stats')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Stats] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao buscar estat√≠sticas');
        }
    });

    // ========================================
    // MENU DE AUDITORIA
    // ========================================
    bot.action('adm_audit', requireAdmin, async (ctx) => {
        try {
            const stats = await auditService.getAuditStats();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìú Logs Recentes', 'audit_recent')],
                [Markup.button.callback('üîç Buscar por Admin', 'audit_by_admin')],
                [Markup.button.callback('üìä Estat√≠sticas', 'audit_stats')],
                [Markup.button.callback('üì§ Exportar', 'audit_export')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(
                `üìú *Auditoria*\n\n` +
                `üìä *Resumo:*\n` +
                `‚îú Total de a√ß√µes: ${stats.total_actions}\n` +
                `‚îú Admins ativos: ${stats.total_admins}\n` +
                `‚îú Tipos de a√ß√£o: ${stats.action_types}\n` +
                `‚îú Dias com atividade: ${stats.active_days}\n` +
                `‚îî √öltima a√ß√£o: ${stats.last_action ? new Date(stats.last_action).toLocaleString('pt-BR') : 'N/A'}\n\n` +
                `Selecione uma op√ß√£o:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Audit] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar auditoria');
        }
    });

    // Logs recentes de auditoria
    bot.action('audit_recent', requireAdmin, async (ctx) => {
        try {
            const logs = await auditService.getAuditLogs({ limit: 10 });

            let message = 'üìú *Logs de Auditoria Recentes*\n\n';

            for (const log of logs) {
                const date = new Date(log.created_at).toLocaleString('pt-BR');
                message += `üïê ${date}\n`;
                message += `üë§ @${log.admin_username || 'admin'}\n`;
                message += `üìå ${log.action_type}\n`;
                message += `üìù ${log.action_description}\n\n`;
            }

            if (logs.length === 0) {
                message += '_Nenhum log encontrado_';
            }

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_audit')]
            ]);

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Audit Recent] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar logs');
        }
    });

    // ========================================
    // VOLTAR AO MENU PRINCIPAL
    // ========================================
    bot.action('adm_main', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üì¢ Broadcast', 'adm_broadcast')],
                [Markup.button.callback('üë• Usu√°rios', 'adm_users')],
                [Markup.button.callback('üîß Sistema', 'adm_system')],
                [Markup.button.callback('üìä Estat√≠sticas', 'adm_stats')],
                [Markup.button.callback('üìú Auditoria', 'adm_audit')]
            ]);

            await ctx.editMessageText(
                'üîß *Painel Administrativo*\n\n' +
                'Bem-vindo ao sistema de administra√ß√£o do Atlas Bridge.\n\n' +
                'Selecione uma op√ß√£o:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Main] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // ========================================
    // PROCESSAR MENSAGENS DE TEXTO (ESTADOS)
    // ========================================
    bot.on('text', async (ctx, next) => {
        if (!isAdmin(ctx.from.id)) return next();

        const state = activeStates.get(ctx.from.id);
        if (!state) return next();

        // Se for comando de cancelar
        if (ctx.message.text === '/cancel') {
            activeStates.delete(ctx.from.id);
            return ctx.reply('‚ùå Opera√ß√£o cancelada.');
        }

        try {
            switch (state.action) {
                case 'user_search':
                    await handleUserSearch(ctx, state);
                    break;

                case 'user_quick_ban':
                    await handleUserQuickBan(ctx, state);
                    break;

                case 'broadcast_message':
                    await handleBroadcastMessage(ctx, state);
                    break;

                case 'broadcast_segmented':
                    await handleSegmentedBroadcast(ctx, state);
                    break;

                case 'broadcast_test':
                    await handleTestBroadcast(ctx, state);
                    break;

                case 'user_ban_reason':
                    await handleUserBanReason(ctx, state);
                    break;

                case 'edit_post_purchase_message':
                    await handlePostPurchaseMessage(ctx, state);
                    break;

                default:
                    return next();
            }
        } catch (error) {
            logger.error(`[Admin State Handler] Erro: ${error.message}`);
            await ctx.reply('‚ùå Erro ao processar comando.');
            activeStates.delete(ctx.from.id);
        }
    });

    // Handler para busca de usu√°rio
    async function handleUserSearch(ctx, state) {
        const searchTerm = ctx.message.text.replace('@', '');

        const result = await userManagementService.searchUsers({
            searchTerm,
            limit: 5
        });

        if (result.users.length === 0) {
            await ctx.reply('‚ùå Nenhum usu√°rio encontrado.');
            activeStates.delete(ctx.from.id);
            return;
        }

        if (result.users.length === 1) {
            // Mostrar detalhes do usu√°rio
            await showUserDetails(ctx, result.users[0].telegram_user_id);
        } else {
            // Mostrar lista para escolher
            let message = 'üîç Resultados da busca:\n\n';
            const buttons = [];

            for (const user of result.users) {
                message += `${user.telegram_user_id} - @${user.telegram_username || 'sem_username'}\n`;
                buttons.push([Markup.button.callback(
                    `üë§ ${user.telegram_username || user.telegram_user_id}`,
                    `user_detail_${user.telegram_user_id}`
                )]);
            }

            buttons.push([Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]);

            await ctx.reply(message, {
                reply_markup: Markup.inlineKeyboard(buttons).reply_markup
            });
        }

        activeStates.delete(ctx.from.id);
    }

    // Handler para editar mensagem p√≥s-compra
    async function handlePostPurchaseMessage(ctx, state) {
        const newMessage = ctx.message.text.trim();

        if (newMessage.length > 1000) {
            await ctx.reply('‚ùå Mensagem muito longa! M√°ximo de 1000 caracteres.');
            return;
        }

        try {
            await dbPool.query(
                "UPDATE system_config SET value = $1, updated_at = NOW() WHERE key = 'post_purchase_message'",
                [newMessage]
            );

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'POST_PURCHASE_UPDATE',
                actionDescription: 'Mensagem p√≥s-compra atualizada',
                targetUserId: null,
                metadata: { newMessage }
            });

            await ctx.reply(
                `‚úÖ *Mensagem P√≥s-Compra Atualizada!*\n\n` +
                `A nova mensagem ser√° enviada ap√≥s compras bem-sucedidas.\n\n` +
                `üìù *Nova mensagem:*\n\`\`\`\n${newMessage}\n\`\`\``,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar ao Menu', 'sys_post_purchase')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Update Post Purchase] Erro: ${error.message}`);
            await ctx.reply('‚ùå Erro ao atualizar mensagem p√≥s-compra.');
        }

        activeStates.delete(ctx.from.id);
    }

    // Handler para banir usu√°rio rapidamente com m√∫ltiplos identificadores
    async function handleUserQuickBan(ctx, state) {
        const identifier = ctx.message.text.trim();

        // Detectar tipo de identificador
        let searchCriteria = {};

        // CPF pattern (xxx.xxx.xxx-xx or xxxxxxxxxxx)
        const cpfPattern = /^(\d{3}\.?\d{3}\.?\d{3}-?\d{2})$/;

        // Wallet pattern (starts with bc1, lq1, or ex1)
        const walletPattern = /^(bc1|lq1|ex1)[a-z0-9]{39,}$/i;

        // Telegram username (starts with @)
        const usernamePattern = /^@?[a-zA-Z0-9_]+$/;

        // Telegram ID (numeric)
        const telegramIdPattern = /^\d+$/;

        let user = null;

        if (cpfPattern.test(identifier)) {
            // Search by CPF
            const cleanCPF = identifier.replace(/[.-]/g, '');
            const result = await dbPool.query(
                'SELECT * FROM users WHERE payer_cpf_cnpj = $1 LIMIT 1',
                [cleanCPF]
            );
            user = result.rows[0];
        } else if (walletPattern.test(identifier)) {
            // Search by wallet
            const result = await dbPool.query(
                'SELECT * FROM users WHERE liquid_address = $1 LIMIT 1',
                [identifier]
            );
            user = result.rows[0];
        } else if (telegramIdPattern.test(identifier)) {
            // Search by Telegram ID
            const result = await userManagementService.getUserDetails(parseInt(identifier));
            user = result.user;
        } else if (usernamePattern.test(identifier)) {
            // Search by username
            const username = identifier.replace('@', '');
            const result = await userManagementService.searchUsers({
                searchTerm: username,
                limit: 1
            });
            user = result.users[0];
        } else {
            // Try general search
            const result = await userManagementService.searchUsers({
                searchTerm: identifier,
                limit: 1
            });
            user = result.users[0];
        }

        if (!user) {
            await ctx.reply('‚ùå Nenhum usu√°rio encontrado com esse identificador.');
            activeStates.delete(ctx.from.id);
            return;
        }

        // Check if already banned
        if (user.is_banned) {
            await ctx.reply(
                `‚ö†Ô∏è Usu√°rio j√° est√° banido\n\n` +
                `ID: ${user.telegram_user_id}\n` +
                `Username: @${user.telegram_username || 'sem_username'}\n` +
                `Nome: ${user.telegram_full_name || 'N/A'}\n\n` +
                `Use /admin para gerenciar usu√°rios.`
            );
            activeStates.delete(ctx.from.id);
            return;
        }

        // Show user info and ask for confirmation
        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('üö´ Confirmar Ban', `quick_ban_confirm_${user.telegram_user_id}`),
                Markup.button.callback('‚ùå Cancelar', 'quick_ban_cancel')
            ]
        ]);

        // Use plain text to avoid Markdown parsing issues
        const message = `üî® Confirmar Banimento\n\n` +
            `Usu√°rio Encontrado:\n` +
            `‚îú ID: ${user.telegram_user_id}\n` +
            `‚îú Username: @${user.telegram_username || 'N/A'}\n` +
            `‚îú Nome: ${user.telegram_full_name || 'N/A'}\n` +
            `‚îú CPF: ${user.payer_cpf_cnpj || 'N/A'}\n` +
            `‚îú Wallet: ${user.liquid_address ? user.liquid_address.substring(0, 20) + '...' : 'N/A'}\n` +
            `‚îú Volume: R$ ${user.total_volume_brl || 0}\n` +
            `‚îú Transa√ß√µes: ${user.completed_transactions || 0}\n` +
            `‚îî Reputa√ß√£o: ${user.reputation_level || 0}\n\n` +
            `‚ö†Ô∏è Deseja confirmar o banimento?`;

        await ctx.reply(message, {
            reply_markup: keyboard.reply_markup
        });

        activeStates.delete(ctx.from.id);
    }

    // Mostrar detalhes do usu√°rio
    async function showUserDetails(ctx, userId) {
        try {
            const details = await userManagementService.getUserDetails(userId);
            const user = details.user;

            const statusIcons = {
                verified: user.is_verified ? '‚úÖ' : '‚ùå',
                banned: user.is_banned ? 'üö´' : '‚úÖ',
                wallet: user.liquid_address ? 'üí∞' : '‚ùå',
                merchant: user.is_merchant ? 'üè™' : '‚ùå'
            };

            // Use plain text to avoid Markdown parsing issues
            let message = `üë§ Detalhes do Usu√°rio\n\n`;
            message += `Informa√ß√µes B√°sicas:\n`;
            message += `‚îú ID: ${user.telegram_user_id}\n`;
            message += `‚îú Username: @${user.telegram_username || 'N/A'}\n`;
            message += `‚îú Nome: ${user.telegram_full_name || 'N/A'}\n`;
            message += `‚îú CPF/CNPJ: ${user.payer_cpf_cnpj || 'N/A'}\n`;
            message += `‚îî Cadastro: ${new Date(user.created_at).toLocaleString('pt-BR')}\n\n`;

            message += `Status:\n`;
            message += `‚îú Verificado: ${statusIcons.verified}\n`;
            message += `‚îú Banido: ${statusIcons.banned}\n`;
            message += `‚îú Carteira: ${statusIcons.wallet}\n`;
            message += `‚îî Merchant: ${statusIcons.merchant}\n\n`;

            message += `Estat√≠sticas:\n`;
            message += `‚îú Reputa√ß√£o: ${user.reputation_level}\n`;
            message += `‚îú Volume: R$ ${user.total_volume_brl}\n`;
            message += `‚îú Transa√ß√µes: ${user.completed_transactions}\n`;
            message += `‚îú Limite di√°rio: R$ ${user.daily_limit_brl}\n`;
            message += `‚îî Usado hoje: R$ ${user.daily_used_brl}\n`;

            if (user.is_banned) {
                message += `\n‚ö†Ô∏è Banimento:\n`;
                message += `‚îú Motivo: ${user.ban_reason || 'N/A'}\n`;
                message += `‚îú Por: ${user.banned_by || 'N/A'}\n`;
                message += `‚îî Data: ${user.banned_at ? new Date(user.banned_at).toLocaleString('pt-BR') : 'N/A'}\n`;
            }

            const buttons = [];

            // A√ß√µes dispon√≠veis
            if (!user.is_banned) {
                buttons.push([Markup.button.callback('üö´ Banir', `user_ban_${userId}`)]);
            } else {
                buttons.push([Markup.button.callback('‚úÖ Desbanir', `user_unban_${userId}`)]);
            }

            if (!user.is_verified) {
                buttons.push([Markup.button.callback('‚úÖ Verificar', `user_verify_${userId}`)]);
            }

            buttons.push([
                Markup.button.callback('üîÑ Resetar Limites', `user_reset_${userId}`),
                Markup.button.callback('‚≠ê Alterar Rep', `user_rep_${userId}`)
            ]);

            buttons.push([
                Markup.button.callback('üìú Hist√≥rico', `user_history_${userId}`),
                Markup.button.callback('üí¨ Enviar MSG', `user_message_${userId}`)
            ]);

            buttons.push([Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]);

            await ctx.reply(message, {
                reply_markup: Markup.inlineKeyboard(buttons).reply_markup
            });

        } catch (error) {
            logger.error(`[Show User Details] Erro: ${error.message}`);
            await ctx.reply('‚ùå Erro ao carregar detalhes do usu√°rio.');
        }
    }

    // Handler para detalhes de usu√°rio
    bot.action(/user_detail_(\d+)/, requireAdmin, async (ctx) => {
        const userId = parseInt(ctx.match[1]);
        await showUserDetails(ctx, userId);
        await ctx.answerCbQuery();
    });

    // Handler para banir usu√°rio
    bot.action(/user_ban_(\d+)/, requireAdmin, async (ctx) => {
        const userId = parseInt(ctx.match[1]);

        activeStates.set(ctx.from.id, {
            action: 'user_ban_reason',
            userId
        });

        await ctx.reply(
            'üö´ Banir Usu√°rio\n\n' +
            'Digite o motivo do banimento:\n\n' +
            'Use /cancel para cancelar'
        );
        await ctx.answerCbQuery();
    });

    // Handler para processar motivo de banimento
    async function handleUserBanReason(ctx, state) {
        const reason = ctx.message.text;

        await userManagementService.banUser(
            state.userId,
            ctx.from.id,
            ctx.from.username,
            reason
        );

        await ctx.reply(
            `‚úÖ Usu√°rio ${state.userId} banido com sucesso.\n` +
            `Motivo: ${reason}`
        );

        activeStates.delete(ctx.from.id);
    }

    // Handler para confirmar quick ban
    bot.action(/quick_ban_confirm_(\d+)/, requireAdmin, async (ctx) => {
        try {
            const userId = parseInt(ctx.match[1]);

            // Execute the ban with a default reason
            await userManagementService.banUser(
                userId,
                ctx.from.id,
                ctx.from.username,
                'Banido via Banimento R√°pido - M√∫ltiplos Identificadores'
            );

            await ctx.editMessageText(
                `‚úÖ Usu√°rio Banido com Sucesso\n\n` +
                `ID: ${userId}\n` +
                `Banido por: @${ctx.from.username || 'admin'}\n` +
                `Data: ${new Date().toLocaleString('pt-BR')}\n\n` +
                `Use /admin para gerenciar outros usu√°rios.`
            );

            // Log the action
            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: AuditService.ActionTypes.USER_BANNED,
                actionDescription: `Usu√°rio ${userId} banido via Quick Ban`,
                targetUserId: userId
            });

            await ctx.answerCbQuery('‚úÖ Usu√°rio banido com sucesso');
        } catch (error) {
            logger.error(`[Quick Ban Confirm] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao banir usu√°rio');
            await ctx.editMessageText(
                `‚ùå Erro ao banir usu√°rio: ${error.message}`
            );
        }
    });

    // Handler para cancelar quick ban
    bot.action('quick_ban_cancel', requireAdmin, async (ctx) => {
        await ctx.editMessageText(
            '‚ùå Banimento cancelado\n\n' +
            'Use /admin para retornar ao painel.'
        );
        await ctx.answerCbQuery('Banimento cancelado');
    });

    // Handler para desbanir usu√°rio
    bot.action(/user_unban_(\d+)/, requireAdmin, async (ctx) => {
        const userId = parseInt(ctx.match[1]);

        await userManagementService.unbanUser(
            userId,
            ctx.from.id,
            ctx.from.username
        );

        await ctx.answerCbQuery('‚úÖ Usu√°rio desbanido');
        await showUserDetails(ctx, userId);
    });

    // Handler para verificar usu√°rio
    bot.action(/user_verify_(\d+)/, requireAdmin, async (ctx) => {
        const userId = parseInt(ctx.match[1]);

        await userManagementService.verifyUser(
            userId,
            ctx.from.id,
            ctx.from.username
        );

        await ctx.answerCbQuery('‚úÖ Usu√°rio verificado');
        await showUserDetails(ctx, userId);
    });

    // Handler para resetar limites
    bot.action(/user_reset_(\d+)/, requireAdmin, async (ctx) => {
        const userId = parseInt(ctx.match[1]);

        await userManagementService.resetUserLimits(
            userId,
            ctx.from.id,
            ctx.from.username
        );

        await ctx.answerCbQuery('‚úÖ Limites resetados');
        await showUserDetails(ctx, userId);
    });

    // ========================================
    // HANDLERS DE BROADCAST
    // ========================================

    // Novo broadcast
    bot.action('bcast_new', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, {
                action: 'broadcast_message',
                type: 'all'
            });

            await ctx.editMessageText(
                'üìù *Novo Broadcast*\n\n' +
                'Envie a mensagem que deseja transmitir para todos os usu√°rios ativos.\n\n' +
                '‚ö†Ô∏è Use /cancel para cancelar',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast New] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para processar mensagem de broadcast
    async function handleBroadcastMessage(ctx, state) {
        const message = escapeMarkdownV2(ctx.message.text);

        await ctx.reply('üì§ Iniciando broadcast...');

        const result = await broadcastService.sendBroadcast(message, {
            keyboard: Markup.inlineKeyboard([
                [Markup.button.url('üí¨ Comunidade', process.env.LINK_COMMUNITY_GROUP || 'https://t.me/atlasdao')]
            ]).reply_markup
        });

        // Registrar auditoria
        await auditService.logAdminAction({
            adminId: ctx.from.id,
            adminUsername: ctx.from.username,
            actionType: AuditService.ActionTypes.BROADCAST_SENT,
            actionDescription: `Broadcast enviado para ${result.sent} usu√°rios`,
            metadata: result
        });

        const report =
            `‚úÖ *Broadcast Conclu√≠do*\n\n` +
            `üìä *Estat√≠sticas:*\n` +
            `‚îú Total: ${result.total}\n` +
            `‚îú ‚úÖ Enviados: ${result.sent}\n` +
            `‚îú ‚ùå Falhas: ${result.failed}\n` +
            `‚îú üö´ Bloqueados: ${result.blocked}\n` +
            `‚îî ‚ö†Ô∏è Inv√°lidos: ${result.invalid}`;

        await ctx.reply(report, { parse_mode: 'Markdown' });
        activeStates.delete(ctx.from.id);
    }

    // Handler para broadcast segmentado
    async function handleSegmentedBroadcast(ctx, state) {
        const message = escapeMarkdownV2(ctx.message.text);
        const filters = state.filters || {};

        await ctx.reply('üì§ Iniciando broadcast segmentado...');

        // Converter filtros para o formato esperado pelo servi√ßo
        const broadcastFilters = {};

        if (filters.isVerified) {
            broadcastFilters.isVerified = true;
        }
        if (filters.minReputation) {
            broadcastFilters.minReputation = filters.minReputation;
        }
        if (filters.minVolume) {
            broadcastFilters.minVolume = filters.minVolume;
        }
        if (filters.activeDays) {
            broadcastFilters.lastActiveWithinDays = filters.activeDays;
        }
        if (filters.inactiveDays) {
            broadcastFilters.inactiveSinceDays = filters.inactiveDays;
        }

        const result = await broadcastService.sendSegmentedBroadcast(message, broadcastFilters, {
            keyboard: Markup.inlineKeyboard([
                [Markup.button.url('üí¨ Comunidade', process.env.LINK_COMMUNITY_GROUP || 'https://t.me/atlasdao')]
            ]).reply_markup
        });

        // Registrar auditoria
        await auditService.logAdminAction({
            adminId: ctx.from.id,
            adminUsername: ctx.from.username,
            actionType: AuditService.ActionTypes.BROADCAST_SENT,
            actionDescription: `Broadcast segmentado enviado para ${result.sent} usu√°rios`,
            metadata: { result, filters: broadcastFilters }
        });

        const report =
            `‚úÖ *Broadcast Segmentado Conclu√≠do*\n\n` +
            `üéØ *Filtros Aplicados:*\n` +
            (filters.isVerified ? `‚îú ‚úÖ Apenas verificados\n` : '') +
            (filters.minReputation ? `‚îú ‚≠ê Reputa√ß√£o >= ${filters.minReputation}\n` : '') +
            (filters.minVolume ? `‚îú üí∞ Volume >= R$ ${filters.minVolume.toLocaleString('pt-BR')}\n` : '') +
            (filters.activeDays ? `‚îú üìÖ Ativos nos √∫ltimos ${filters.activeDays} dias\n` : '') +
            (filters.inactiveDays ? `‚îú üìÖ Inativos h√° mais de ${filters.inactiveDays} dias\n` : '') +
            `\nüìä *Estat√≠sticas:*\n` +
            `‚îú Total: ${result.total}\n` +
            `‚îú ‚úÖ Enviados: ${result.sent}\n` +
            `‚îú ‚ùå Falhas: ${result.failed}\n` +
            `‚îú üö´ Bloqueados: ${result.blocked}\n` +
            `‚îî ‚ö†Ô∏è Inv√°lidos: ${result.invalid}`;

        await ctx.reply(report, { parse_mode: 'Markdown' });
        activeStates.delete(ctx.from.id);
    }

    // Handler para broadcast de teste
    async function handleTestBroadcast(ctx, state) {
        const message = escapeMarkdownV2(ctx.message.text);

        await ctx.reply('üß™ Enviando mensagem de teste para administradores...');

        let sent = 0;
        let failed = 0;

        for (const adminId of ADMIN_IDS) {
            try {
                await bot.telegram.sendMessage(adminId,
                    `üß™ *TESTE DE BROADCAST*\n\n${message}\n\n_Esta √© uma mensagem de teste enviada apenas para administradores._`,
                    {
                        parse_mode: 'MarkdownV2',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.url('üí¨ Comunidade', process.env.LINK_COMMUNITY_GROUP || 'https://t.me/atlasdao')]
                        ]).reply_markup
                    }
                );
                sent++;
            } catch (error) {
                logger.error(`[Test Broadcast] Erro ao enviar para admin ${adminId}: ${error.message}`);
                failed++;
            }
        }

        // Registrar auditoria
        await auditService.logAdminAction({
            adminId: ctx.from.id,
            adminUsername: ctx.from.username,
            actionType: 'BROADCAST_TEST',
            actionDescription: `Broadcast de teste enviado para ${sent} admins`,
            metadata: { sent, failed }
        });

        const report =
            `‚úÖ *Teste de Broadcast Conclu√≠do*\n\n` +
            `üìä *Estat√≠sticas:*\n` +
            `‚îú Total de Admins: ${ADMIN_IDS.length}\n` +
            `‚îú ‚úÖ Enviados: ${sent}\n` +
            `‚îî ‚ùå Falhas: ${failed}`;

        await ctx.reply(report, { parse_mode: 'Markdown' });
        activeStates.delete(ctx.from.id);
    }

    // ========================================
    // COMANDO /cancel
    // ========================================
    bot.command('cancel', (ctx) => {
        if (activeStates.has(ctx.from.id)) {
            activeStates.delete(ctx.from.id);
            ctx.reply('‚ùå Opera√ß√£o cancelada.');
        }
    });

    // Handler para callbacks n√£o implementados
    bot.action('noop', async (ctx) => {
        await ctx.answerCbQuery();
    });

    // ========================================
    // HANDLERS ADICIONAIS FALTANTES
    // ========================================

    // Removed configuration menu - not needed
    /* bot.action('adm_config', requireAdmin, async (ctx) => {
        try {
            // Buscar configura√ß√µes atuais
            const config = await systemManagementService.getSystemConfig();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üí∞ Limites e Taxas', 'config_limits')],
                [Markup.button.callback('üõ°Ô∏è Seguran√ßa', 'config_security')],
                [Markup.button.callback('üì¢ Notifica√ß√µes', 'config_notifications')],
                [Markup.button.callback('üë• Permiss√µes Admin', 'config_permissions')],
                [Markup.button.callback('ü§ñ Bot Settings', 'config_bot')],
                [Markup.button.callback('üîÑ Recarregar Config', 'config_reload')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_main')]
            ]);

            await ctx.editMessageText(
                '‚öôÔ∏è *Configura√ß√µes do Sistema*\n\n' +
                'üìä *Status Atual:*\n' +
                `‚îú Modo Manuten√ß√£o: ${config.maintenanceMode ? 'üî¥ Ativo' : 'üü¢ Inativo'}\n` +
                `‚îú Taxa de Transa√ß√£o: R$ ${config.transactionFee || 0.99}\n` +
                `‚îú Limite Di√°rio: R$ ${config.dailyLimit || 1000}\n` +
                `‚îú Limite por Transa√ß√£o: R$ ${config.transactionLimit || 500}\n` +
                `‚îú Verifica√ß√£o Obrigat√≥ria: ${config.requireVerification ? '‚úÖ Sim' : '‚ùå N√£o'}\n` +
                `‚îú Auto Backup: ${config.autoBackup ? '‚úÖ Habilitado' : '‚ùå Desabilitado'}\n` +
                `‚îú Rate Limiting: ${config.rateLimitEnabled ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚îî Debug Mode: ${config.debugMode ? '‚úÖ Ativo' : '‚ùå Inativo'}\n\n` +
                'Selecione uma categoria para configurar:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Admin Config] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir configura√ß√µes');
        }
    });

    // Handler para configura√ß√£o de limites
    bot.action('config_limits', requireAdmin, async (ctx) => {
        try {
            const config = await systemManagementService.getSystemConfig();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback(`Taxa: R$ ${config.transactionFee || 0.99}`, 'set_transaction_fee')],
                [Markup.button.callback(`Limite Di√°rio: R$ ${config.dailyLimit || 1000}`, 'set_daily_limit')],
                [Markup.button.callback(`Limite/Transa√ß√£o: R$ ${config.transactionLimit || 500}`, 'set_transaction_limit')],
                [Markup.button.callback(`Min Reputa√ß√£o: ${config.minReputationLevel || 1}`, 'set_min_reputation')],
                [Markup.button.callback(`Max Reputa√ß√£o: ${config.maxReputationLevel || 10}`, 'set_max_reputation')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_config')]
            ]);

            await ctx.editMessageText(
                'üí∞ **Limites e Taxas**\n\n' +
                'Clique em um item para alterar seu valor:\n\n' +
                `‚Ä¢ **Taxa de Transa√ß√£o:** R$ ${config.transactionFee || 0.99}\n` +
                `‚Ä¢ **Limite Di√°rio Padr√£o:** R$ ${config.dailyLimit || 1000}\n` +
                `‚Ä¢ **Limite por Transa√ß√£o:** R$ ${config.transactionLimit || 500}\n` +
                `‚Ä¢ **N√≠vel M√≠nimo de Reputa√ß√£o:** ${config.minReputationLevel || 1}\n` +
                `‚Ä¢ **N√≠vel M√°ximo de Reputa√ß√£o:** ${config.maxReputationLevel || 10}\n\n` +
                '‚ö†Ô∏è Mudan√ßas s√£o aplicadas imediatamente!',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Config Limits] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir limites');
        }
    });

    // Handler para configura√ß√£o de seguran√ßa
    bot.action('config_security', requireAdmin, async (ctx) => {
        try {
            const config = await systemManagementService.getSystemConfig();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback(
                    `${config.requireVerification ? '‚úÖ' : '‚ùå'} Verifica√ß√£o Obrigat√≥ria`,
                    'toggle_require_verification'
                )],
                [Markup.button.callback(
                    `${config.rateLimitEnabled ? '‚úÖ' : '‚ùå'} Rate Limiting`,
                    'toggle_rate_limit'
                )],
                [Markup.button.callback(
                    `${config.antiSpam ? '‚úÖ' : '‚ùå'} Anti-Spam`,
                    'toggle_anti_spam'
                )],
                [Markup.button.callback(
                    `${config.requireKYC ? '‚úÖ' : '‚ùå'} KYC Obrigat√≥rio`,
                    'toggle_require_kyc'
                )],
                [Markup.button.callback(
                    `${config.blockVPN ? '‚úÖ' : '‚ùå'} Bloquear VPN`,
                    'toggle_block_vpn'
                )],
                [Markup.button.callback(
                    `${config.twoFactorAdmin ? '‚úÖ' : '‚ùå'} 2FA para Admins`,
                    'toggle_2fa_admin'
                )],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_config')]
            ]);

            await ctx.editMessageText(
                'üõ°Ô∏è **Configura√ß√µes de Seguran√ßa**\n\n' +
                'Clique para ativar/desativar:\n\n' +
                `‚Ä¢ **Verifica√ß√£o Obrigat√≥ria:** ${config.requireVerification ? '‚úÖ Ativa' : '‚ùå Inativa'}\n` +
                `‚Ä¢ **Rate Limiting:** ${config.rateLimitEnabled ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **Anti-Spam:** ${config.antiSpam ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **KYC Obrigat√≥rio:** ${config.requireKYC ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **Bloquear VPN:** ${config.blockVPN ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **2FA para Admins:** ${config.twoFactorAdmin ? '‚úÖ Ativo' : '‚ùå Inativo'}\n\n` +
                '‚ö†Ô∏è Mudan√ßas de seguran√ßa podem afetar usu√°rios ativos!',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Config Security] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir seguran√ßa');
        }
    });

    // Handler para configura√ß√£o de notifica√ß√µes
    bot.action('config_notifications', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìß Notificar Novos Usu√°rios', 'toggle_notify_new_users')],
                [Markup.button.callback('üí∞ Notificar Transa√ß√µes', 'toggle_notify_transactions')],
                [Markup.button.callback('‚ö†Ô∏è Notificar Erros', 'toggle_notify_errors')],
                [Markup.button.callback('üîí Notificar Eventos Seguran√ßa', 'toggle_notify_security')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_config')]
            ]);

            await ctx.editMessageText(
                'üì¢ **Configura√ß√µes de Notifica√ß√µes**\n\n' +
                'Configure quais eventos devem notificar os administradores:\n\n' +
                'Em desenvolvimento...',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Config Notifications] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para configura√ß√£o do bot
    bot.action('config_bot', requireAdmin, async (ctx) => {
        try {
            const config = await systemManagementService.getSystemConfig();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback(
                    `${config.debugMode ? '‚úÖ' : '‚ùå'} Debug Mode`,
                    'toggle_debug_mode'
                )],
                [Markup.button.callback(
                    `${config.autoBackup ? '‚úÖ' : '‚ùå'} Auto Backup`,
                    'toggle_auto_backup'
                )],
                [Markup.button.callback('üîÑ Resetar Cache', 'reset_cache')],
                [Markup.button.callback('üìù Webhook Secret', 'set_webhook_secret')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_config')]
            ]);

            await ctx.editMessageText(
                'ü§ñ **Configura√ß√µes do Bot**\n\n' +
                `‚Ä¢ **Debug Mode:** ${config.debugMode ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **Auto Backup:** ${config.autoBackup ? '‚úÖ Ativo' : '‚ùå Inativo'}\n` +
                `‚Ä¢ **Webhook Secret:** ${config.webhookSecret ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}\n\n` +
                'Clique para modificar:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Config Bot] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para recarregar configura√ß√µes
    bot.action('config_reload', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üîÑ Recarregando configura√ß√µes...');

            const config = await systemManagementService.reloadConfig();

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'CONFIG_RELOADED',
                actionDescription: 'Configura√ß√µes do sistema recarregadas'
            });

            await ctx.editMessageText(
                '‚úÖ **Configura√ß√µes Recarregadas**\n\n' +
                'As configura√ß√µes foram recarregadas do banco de dados.\n\n' +
                `‚Ä¢ Modo Manuten√ß√£o: ${config.maintenanceMode ? 'üî¥ Ativo' : 'üü¢ Inativo'}\n` +
                `‚Ä¢ Configura√ß√µes carregadas: ${Object.keys(config).length}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_config')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Config Reload] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao recarregar');
        }
    });

    // Handlers para toggle de configura√ß√µes
    bot.action(/^toggle_(.+)$/, requireAdmin, async (ctx) => {
        const configKey = ctx.match[1];
        try {
            const newValue = await systemManagementService.toggleConfig(configKey);

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'CONFIG_TOGGLED',
                actionDescription: `${configKey} alterado para ${newValue}`
            });

            await ctx.answerCbQuery(`‚úÖ ${configKey}: ${newValue ? 'ATIVADO' : 'DESATIVADO'}`, true);

            // Recarregar a tela atual
            const currentAction = ctx.callbackQuery.message.reply_markup.inline_keyboard
                .flat()
                .find(btn => btn.text.includes('Voltar'))?.callback_data;

            if (currentAction) {
                return bot.handleUpdate({
                    ...ctx.update,
                    callback_query: { ...ctx.callbackQuery, data: currentAction === 'adm_config' ? 'config_security' : 'config_bot' }
                });
            }
        } catch (error) {
            logger.error(`[Toggle Config] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao alterar configura√ß√£o');
        }
    });

    // Handler para resetar cache
    bot.action('reset_cache', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üîÑ Limpando cache...');

            const keysDeleted = await systemManagementService.clearCache();

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'CACHE_CLEARED',
                actionDescription: `Cache limpo: ${keysDeleted} chaves removidas`
            });

            await ctx.editMessageText(
                `‚úÖ **Cache Limpo**\n\n` +
                `üóëÔ∏è ${keysDeleted} chaves removidas do Redis\n\n` +
                `O cache foi limpo com sucesso.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'config_bot')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Reset Cache] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao limpar cache');
        }
    }); */

    // Handler para Broadcast Segmentado
    bot.action('bcast_segmented', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ Apenas Verificados', 'bcast_verified')],
                [Markup.button.callback('üåü Por Reputa√ß√£o', 'bcast_by_rep')],
                [Markup.button.callback('üí∞ Por Volume', 'bcast_by_volume')],
                [Markup.button.callback('üìÖ Por Atividade', 'bcast_by_activity')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_broadcast')]
            ]);

            await ctx.editMessageText(
                'üéØ *Broadcast Segmentado*\n\n' +
                'Escolha o crit√©rio de segmenta√ß√£o:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast Segmented] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir segmenta√ß√£o');
        }
    });

    // Handler para Broadcast de Teste
    bot.action('bcast_test', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, { action: 'broadcast_test' });

            await ctx.editMessageText(
                'üß™ *Broadcast de Teste*\n\n' +
                'Esta mensagem ser√° enviada apenas para administradores.\n\n' +
                'Digite a mensagem de teste ou /cancel para cancelar:',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast Test] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao iniciar teste');
        }
    });

    // Handler para Broadcast Apenas Verificados
    bot.action('bcast_verified', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, {
                action: 'broadcast_segmented',
                filters: { isVerified: true }
            });

            await ctx.editMessageText(
                '‚úÖ *Broadcast - Apenas Verificados*\n\n' +
                'A mensagem ser√° enviada apenas para usu√°rios verificados.\n\n' +
                'Digite a mensagem ou /cancel para cancelar:',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast Verified] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao iniciar broadcast');
        }
    });

    // Handler para Broadcast por Reputa√ß√£o
    bot.action('bcast_by_rep', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚≠ê Reputa√ß√£o >= 50', 'seg_rep_50')],
                [Markup.button.callback('‚≠ê Reputa√ß√£o >= 75', 'seg_rep_75')],
                [Markup.button.callback('‚≠ê Reputa√ß√£o >= 90', 'seg_rep_90')],
                [Markup.button.callback('üéØ Personalizado', 'seg_rep_custom')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'bcast_segmented')]
            ]);

            await ctx.editMessageText(
                'üåü *Broadcast por Reputa√ß√£o*\n\n' +
                'Selecione o n√≠vel m√≠nimo de reputa√ß√£o:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast By Rep] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handlers para n√≠veis de reputa√ß√£o
    bot.action(/^seg_rep_(\d+)$/, requireAdmin, async (ctx) => {
        const minRep = parseInt(ctx.match[1]);
        try {
            activeStates.set(ctx.from.id, {
                action: 'broadcast_segmented',
                filters: { minReputation: minRep }
            });

            await ctx.editMessageText(
                `üåü *Broadcast - Reputa√ß√£o >= ${minRep}*\n\n` +
                `A mensagem ser√° enviada apenas para usu√°rios com reputa√ß√£o >= ${minRep}.\n\n` +
                'Digite a mensagem ou /cancel para cancelar:',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Seg Rep] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para Broadcast por Volume
    bot.action('bcast_by_volume', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üí∞ R$ 1.000+', 'seg_vol_1000')],
                [Markup.button.callback('üí∞ R$ 5.000+', 'seg_vol_5000')],
                [Markup.button.callback('üí∞ R$ 10.000+', 'seg_vol_10000')],
                [Markup.button.callback('üí∞ R$ 50.000+', 'seg_vol_50000')],
                [Markup.button.callback('üéØ Personalizado', 'seg_vol_custom')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'bcast_segmented')]
            ]);

            await ctx.editMessageText(
                'üí∞ *Broadcast por Volume de Transa√ß√µes*\n\n' +
                'Selecione o volume m√≠nimo:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast By Volume] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handlers para volumes
    bot.action(/^seg_vol_(\d+)$/, requireAdmin, async (ctx) => {
        const minVolume = parseInt(ctx.match[1]);
        try {
            activeStates.set(ctx.from.id, {
                action: 'broadcast_segmented',
                filters: { minVolume }
            });

            await ctx.editMessageText(
                `üí∞ *Broadcast - Volume >= R$ ${minVolume.toLocaleString('pt-BR')}*\n\n` +
                `A mensagem ser√° enviada apenas para usu√°rios com volume >= R$ ${minVolume.toLocaleString('pt-BR')}.\n\n` +
                'Digite a mensagem ou /cancel para cancelar:',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Seg Volume] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para Broadcast por Atividade
    bot.action('bcast_by_activity', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìÖ √öltimas 24 horas', 'seg_act_1')],
                [Markup.button.callback('üìÖ √öltimos 7 dias', 'seg_act_7')],
                [Markup.button.callback('üìÖ √öltimos 30 dias', 'seg_act_30')],
                [Markup.button.callback('üìÖ √öltimos 90 dias', 'seg_act_90')],
                [Markup.button.callback('üìÖ Inativos h√° 30+ dias', 'seg_act_inactive')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'bcast_segmented')]
            ]);

            await ctx.editMessageText(
                'üìÖ *Broadcast por Per√≠odo de Atividade*\n\n' +
                'Selecione o per√≠odo:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast By Activity] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handlers para atividade
    bot.action(/^seg_act_(\w+)$/, requireAdmin, async (ctx) => {
        const period = ctx.match[1];
        try {
            let filters = {};
            let description = '';

            if (period === 'inactive') {
                filters.inactiveDays = 30;
                description = 'Inativos h√° mais de 30 dias';
            } else {
                const days = parseInt(period);
                filters.activeDays = days;
                description = `Ativos nos √∫ltimos ${days} dia${days > 1 ? 's' : ''}`;
            }

            activeStates.set(ctx.from.id, {
                action: 'broadcast_segmented',
                filters
            });

            await ctx.editMessageText(
                `üìÖ *Broadcast - ${description}*\n\n` +
                `A mensagem ser√° enviada apenas para usu√°rios ${description.toLowerCase()}.\n\n` +
                'Digite a mensagem ou /cancel para cancelar:',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Seg Activity] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para Estat√≠sticas de Broadcast
    bot.action('bcast_stats', requireAdmin, async (ctx) => {
        try {
            const stats = await broadcastService.getBroadcastHistory();

            let message = 'üìä *Estat√≠sticas de Broadcast*\n\n';

            if (stats && stats.length > 0) {
                for (const broadcast of stats.slice(0, 5)) {
                    message += `üìÖ *${new Date(broadcast.created_at).toLocaleDateString('pt-BR')}*\n`;
                    message += `‚îú Enviados: ${broadcast.sent_count}\n`;
                    message += `‚îú Falhas: ${broadcast.failed_count}\n`;
                    message += `‚îú Bloqueados: ${broadcast.blocked_count}\n`;
                    message += `‚îî Taxa sucesso: ${((broadcast.sent_count / broadcast.total_count) * 100).toFixed(1)}%\n\n`;
                }
            } else {
                message += 'Nenhum broadcast realizado ainda.';
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_broadcast')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Broadcast Stats] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar estat√≠sticas');
        }
    });

    // Handler para Usu√°rios Suspeitos
    bot.action('user_suspicious', requireAdmin, async (ctx) => {
        try {
            const suspicious = await userManagementService.findSuspiciousActivity();

            let message = '‚ö†Ô∏è *Atividade Suspeita*\n\n';

            if (suspicious && suspicious.length > 0) {
                for (const user of suspicious.slice(0, 10)) {
                    message += `üîç ${user.telegram_user_id} - @${user.telegram_username || 'sem_username'}\n`;
                    message += `‚îú Motivo: ${user.reason}\n`;
                    message += `‚îú Volume: R$ ${user.total_volume_brl}\n`;
                    message += `‚îî Transa√ß√µes: ${user.completed_transactions}\n\n`;
                }
            } else {
                message += 'Nenhuma atividade suspeita detectada.';
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User Suspicious] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao buscar suspeitos');
        }
    });

    // Handler para Usu√°rios Banidos
    bot.action('user_banned', requireAdmin, async (ctx) => {
        try {
            const result = await userManagementService.searchUsers({
                isBanned: true,
                limit: 20,
                sortBy: 'updated_at',
                sortOrder: 'DESC'
            });

            let message = 'üö´ *Usu√°rios Banidos*\n\n';

            if (result.users && result.users.length > 0) {
                for (const user of result.users) {
                    message += `‚ùå ${user.telegram_user_id} - @${user.telegram_username || 'sem_username'}\n`;
                    message += `‚îú Nome: ${user.telegram_full_name || 'N/A'}\n`;
                    message += `‚îú Motivo: ${user.ban_reason || 'N√£o especificado'}\n`;
                    message += `‚îî Data: ${new Date(user.banned_at || user.updated_at).toLocaleDateString('pt-BR')}\n\n`;
                }
            } else {
                message += 'Nenhum usu√°rio banido.';
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User Banned] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao listar banidos');
        }
    });

    // Handler para Usu√°rios Verificados
    bot.action('user_verified', requireAdmin, async (ctx) => {
        try {
            const result = await userManagementService.searchUsers({
                isVerified: true,
                limit: 20,
                sortBy: 'total_volume_brl',
                sortOrder: 'DESC'
            });

            let message = '‚úÖ *Usu√°rios Verificados*\n\n';

            if (result.users && result.users.length > 0) {
                for (const user of result.users) {
                    message += `‚úÖ ${user.telegram_user_id} - @${user.telegram_username || 'sem_username'}\n`;
                    message += `‚îú Nome: ${user.telegram_full_name || 'N/A'}\n`;
                    message += `‚îú Volume: R$ ${user.total_volume_brl}\n`;
                    message += `‚îú Reputa√ß√£o: ${user.reputation_level}\n`;
                    message += `‚îî Transa√ß√µes: ${user.completed_transactions}\n\n`;
                }
            } else {
                message += 'Nenhum usu√°rio verificado.';
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[User Verified] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao listar verificados');
        }
    });

    // Handler para Exportar Dados de Usu√°rios
    bot.action('user_export', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üì§ Preparando exporta√ß√£o...');

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìÑ CSV', 'export_csv')],
                [Markup.button.callback('üìä JSON', 'export_json')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_users')]
            ]);

            await ctx.editMessageText(
                'üì§ *Exportar Dados*\n\n' +
                'Escolha o formato de exporta√ß√£o:\n\n' +
                '‚Ä¢ *CSV* - Para an√°lise em planilhas\n' +
                '‚Ä¢ *JSON* - Para integra√ß√£o com sistemas\n\n' +
                '‚ö†Ô∏è O arquivo ser√° enviado via mensagem privada.',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
        } catch (error) {
            logger.error(`[User Export] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao preparar exporta√ß√£o');
        }
    });

    // Handler para M√©tricas do Sistema
    bot.action('sys_metrics', requireAdmin, async (ctx) => {
        try {
            const metrics = await systemManagementService.getSystemMetrics();

            let message = 'üìà *M√©tricas do Sistema*\n\n';
            message += 'üìä *Performance (√∫ltima hora):*\n';
            message += `‚îú Requisi√ß√µes: ${metrics.requests || 0}\n`;
            message += `‚îú Tempo m√©dio: ${metrics.avgResponseTime || 'N/A'}ms\n`;
            message += `‚îú Taxa de erro: ${metrics.errorRate || 0}%\n`;
            message += `‚îî Uptime: ${metrics.uptime || 'N/A'}\n\n`;

            message += 'üíæ *Recursos:*\n';
            message += `‚îú CPU: ${metrics.cpuUsage || 'N/A'}%\n`;
            message += `‚îú RAM: ${metrics.memoryUsage || 'N/A'}%\n`;
            message += `‚îú Disco: ${metrics.diskUsage || 'N/A'}%\n`;
            message += `‚îî Rede: ${metrics.networkUsage || 'N/A'} MB/s\n\n`;

            message += 'üìà *Tend√™ncias (24h):*\n';
            message += `‚îú Pico de requisi√ß√µes: ${metrics.peakRequests || 'N/A'}\n`;
            message += `‚îú Hor√°rio de pico: ${metrics.peakTime || 'N/A'}\n`;
            message += `‚îî Total processado: ${metrics.totalProcessed || 'N/A'}`;

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ Atualizar', 'sys_metrics')],
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[System Metrics] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar m√©tricas');
        }
    });

    // Handler para Logs do Sistema
    bot.action('sys_logs', requireAdmin, async (ctx) => {
        try {
            const logs = await systemManagementService.getRecentLogs(20);

            let message = 'üìú *Logs do Sistema*\n\n';

            if (logs && logs.length > 0) {
                for (const log of logs) {
                    const icon = log.level === 'error' ? 'üî¥' :
                                 log.level === 'warn' ? 'üü°' : 'üü¢';
                    message += `${icon} [${log.timestamp}]\n`;
                    message += `${log.message}\n\n`;
                }
            } else {
                message += 'Nenhum log dispon√≠vel.';
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ Atualizar', 'sys_logs')],
                    [Markup.button.callback('üì§ Exportar', 'logs_export')],
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[System Logs] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar logs');
        }
    });

    // Handler para Post-Purchase Message
    bot.action('sys_post_purchase', requireAdmin, async (ctx) => {
        try {
            // Get current message from database
            const { rows } = await dbPool.query(
                "SELECT value FROM system_config WHERE key = 'post_purchase_message' AND active = true"
            );

            const currentMessage = rows.length > 0 ? rows[0].value : 'N√£o configurado';

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úèÔ∏è Editar Mensagem', 'edit_post_purchase')],
                [Markup.button.callback('üëÅÔ∏è Visualizar', 'preview_post_purchase')],
                [Markup.button.callback('üîÑ Restaurar Padr√£o', 'reset_post_purchase')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
            ]);

            await ctx.editMessageText(
                `üí¨ *Mensagem P√≥s-Compra*\n\n` +
                `Esta mensagem √© enviada automaticamente 3 segundos ap√≥s uma compra bem-sucedida.\n\n` +
                `üìù *Mensagem Atual:*\n\`\`\`\n${currentMessage.substring(0, 500)}${currentMessage.length > 500 ? '...' : ''}\n\`\`\`\n\n` +
                `Use os bot√µes abaixo para gerenciar a mensagem.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Post Purchase Message] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar configura√ß√£o');
        }
    });

    // Handler para editar post-purchase message
    bot.action('edit_post_purchase', requireAdmin, async (ctx) => {
        activeStates.set(ctx.from.id, {
            action: 'edit_post_purchase_message'
        });

        await ctx.editMessageText(
            `‚úèÔ∏è *Editar Mensagem P√≥s-Compra*\n\n` +
            `Digite a nova mensagem que ser√° enviada ap√≥s compras bem-sucedidas.\n\n` +
            `üí° *Dicas:*\n` +
            `‚Ä¢ Use \\* para negrito\n` +
            `‚Ä¢ Use \\n para quebras de linha\n` +
            `‚Ä¢ M√°ximo de 1000 caracteres\n\n` +
            `Digite /cancel para cancelar`,
            { parse_mode: 'Markdown' }
        );
        await ctx.answerCbQuery('Aguardando nova mensagem...');
    });

    // Handler para preview da mensagem
    bot.action('preview_post_purchase', requireAdmin, async (ctx) => {
        try {
            const { rows } = await dbPool.query(
                "SELECT value FROM system_config WHERE key = 'post_purchase_message' AND active = true"
            );

            const message = rows.length > 0 ? rows[0].value : 'N√£o configurado';

            // Show the message exactly as it will appear (without markdown parsing issues)
            await ctx.reply(
                `üëÅÔ∏è Preview da Mensagem P√≥s-Compra:\n\n${message}`,
                {
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_post_purchase')]
                    ]).reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Preview Post Purchase] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao visualizar mensagem');
        }
    });

    // Handler para resetar mensagem padr√£o
    bot.action('reset_post_purchase', requireAdmin, async (ctx) => {
        try {
            const defaultMessage = 'üéØ *Sucesso na sua compra!*\n\n' +
                'Aproveite seus DePix! Lembre-se:\n' +
                '‚Ä¢ DePix √© um Real digital soberano\n' +
                '‚Ä¢ Voc√™ tem controle total dos seus fundos\n' +
                '‚Ä¢ Transa√ß√µes r√°pidas e privadas na Liquid Network\n\n' +
                'Precisa de ajuda? @atlasDAO_support';

            await dbPool.query(
                "UPDATE system_config SET value = $1, updated_at = NOW() WHERE key = 'post_purchase_message'",
                [defaultMessage]
            );

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'POST_PURCHASE_RESET',
                actionDescription: 'Mensagem p√≥s-compra restaurada ao padr√£o'
            });

            await ctx.answerCbQuery('‚úÖ Mensagem restaurada ao padr√£o');

            // Reload the menu
            bot.action('sys_post_purchase').trigger(ctx);
        } catch (error) {
            logger.error(`[Reset Post Purchase] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao resetar mensagem');
        }
    });

    // Handler para Seguran√ßa
    bot.action('sys_security', requireAdmin, async (ctx) => {
        try {
            const security = await systemManagementService.getSecurityStatus();

            let message = 'üõ°Ô∏è *Status de Seguran√ßa*\n\n';
            message += 'üîê *Autentica√ß√£o:*\n';
            message += `‚îú Tentativas de login (24h): ${security.loginAttempts || 0}\n`;
            message += `‚îú Logins bem-sucedidos: ${security.successfulLogins || 0}\n`;
            message += `‚îú Logins falhados: ${security.failedLogins || 0}\n`;
            message += `‚îî IPs bloqueados: ${security.blockedIps || 0}\n\n`;

            message += '‚ö†Ô∏è *Amea√ßas Detectadas:*\n';
            message += `‚îú Tentativas de SQL Injection: ${security.sqlInjectionAttempts || 0}\n`;
            message += `‚îú Requisi√ß√µes suspeitas: ${security.suspiciousRequests || 0}\n`;
            message += `‚îú Rate limit excedido: ${security.rateLimitExceeded || 0}\n`;
            message += `‚îî Tokens inv√°lidos: ${security.invalidTokens || 0}\n\n`;

            message += '‚úÖ *Prote√ß√µes Ativas:*\n';
            message += `‚îú Rate limiting: ${security.rateLimitingEnabled ? '‚úì' : '‚úó'}\n`;
            message += `‚îú Valida√ß√£o de entrada: ${security.inputValidationEnabled ? '‚úì' : '‚úó'}\n`;
            message += `‚îú HTTPS obrigat√≥rio: ${security.httpsOnly ? '‚úì' : '‚úó'}\n`;
            message += `‚îî 2FA para admins: ${security.twoFactorEnabled ? '‚úì' : '‚úó'}`;

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ Atualizar', 'sys_security')],
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[System Security] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar seguran√ßa');
        }
    });

    // Handler para Manuten√ß√£o
    bot.action('sys_maintenance', requireAdmin, async (ctx) => {
        try {
            // Get current maintenance status from system
            const config = await systemManagementService.getSystemConfig();
            const isMaintenanceActive = config.maintenanceMode || false;

            // Check Redis for the most current status
            let redisStatus = null;
            try {
                redisStatus = await redisClient.get('maintenance_mode');
                if (redisStatus !== null) {
                    isMaintenanceActive = redisStatus === '1' || redisStatus === 'true';
                }
            } catch (e) {
                // Use database status if Redis fails
            }

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback(
                    isMaintenanceActive ? 'üü¢ DESATIVAR Manuten√ß√£o' : 'üî¥ ATIVAR Manuten√ß√£o',
                    'toggle_maintenance'
                )],
                [Markup.button.callback('üîÑ Reiniciar Servi√ßos', 'restart_services')],
                [Markup.button.callback('üóëÔ∏è Limpar Logs Antigos', 'clean_logs')],
                [Markup.button.callback('üîß Otimizar Banco', 'optimize_db')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
            ]);

            const statusDetails = isMaintenanceActive ?
                '‚ö†Ô∏è **ATEN√á√ÉO: Sistema em manuten√ß√£o!**\n\n' +
                'üî¥ **STATUS: ATIVO**\n' +
                '‚Ä¢ Usu√°rios normais est√£o BLOQUEADOS\n' +
                '‚Ä¢ Apenas admins podem usar o bot\n' +
                '‚Ä¢ Todas as transa√ß√µes est√£o suspensas\n\n' +
                '‚ö° Clique em "DESATIVAR" para liberar o sistema'
                :
                '‚úÖ **Sistema operacional normal**\n\n' +
                'üü¢ **STATUS: INATIVO**\n' +
                '‚Ä¢ Todos os usu√°rios podem usar o bot\n' +
                '‚Ä¢ Transa√ß√µes funcionando normalmente\n\n' +
                '‚ö†Ô∏è Clique em "ATIVAR" para bloquear usu√°rios n√£o-admin';

            await ctx.editMessageText(
                'üîß **Modo de Manuten√ß√£o**\n\n' +
                statusDetails + '\n\n' +
                '**Outras a√ß√µes dispon√≠veis:**',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[System Maintenance] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao abrir manuten√ß√£o');
        }
    });

    // Handler para Backups
    bot.action('sys_backup', requireAdmin, async (ctx) => {
        try {
            const backups = await systemManagementService.getBackupStatus();

            let message = 'üíæ *Gerenciamento de Backups*\n\n';
            message += 'üìÖ *√öltimo Backup:*\n';
            message += `‚îú Data: ${backups.lastBackup || 'Nunca'}\n`;
            message += `‚îú Tamanho: ${backups.lastBackupSize || 'N/A'}\n`;
            message += `‚îî Status: ${backups.lastBackupStatus || 'N/A'}\n\n`;

            message += '‚è∞ *Pr√≥ximo Backup:*\n';
            message += `‚îú Agendado: ${backups.nextBackup || 'N/A'}\n`;
            message += `‚îî Tipo: ${backups.nextBackupType || 'N/A'}\n\n`;

            message += 'üìä *Estat√≠sticas:*\n';
            message += `‚îú Total de backups: ${backups.totalBackups || 0}\n`;
            message += `‚îú Backups bem-sucedidos: ${backups.successfulBackups || 0}\n`;
            message += `‚îú Espa√ßo usado: ${backups.totalSize || 'N/A'}\n`;
            message += `‚îî Reten√ß√£o: ${backups.retentionDays || 30} dias`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üíæ Fazer Backup Agora', 'backup_now')],
                [Markup.button.callback('üìã Listar Backups', 'list_backups')],
                [Markup.button.callback('‚öôÔ∏è Configurar', 'backup_config')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
            ]);

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[System Backup] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar backups');
        }
    });

    // Handler para Buscar por Admin (Auditoria)
    bot.action('audit_by_admin', requireAdmin, async (ctx) => {
        try {
            activeStates.set(ctx.from.id, { action: 'audit_search_admin' });

            await ctx.editMessageText(
                'üîç *Buscar Logs por Admin*\n\n' +
                'Digite o ID ou username do admin para buscar suas a√ß√µes.\n\n' +
                'Use /cancel para cancelar',
                { parse_mode: 'Markdown' }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Audit By Admin] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para Estat√≠sticas de Auditoria
    bot.action('audit_stats', requireAdmin, async (ctx) => {
        try {
            const stats = await auditService.getAuditStatistics();

            let message = 'üìä *Estat√≠sticas de Auditoria*\n\n';
            message += 'üìà *A√ß√µes por Tipo (30 dias):*\n';

            if (stats.actionCounts) {
                for (const [action, count] of Object.entries(stats.actionCounts)) {
                    message += `‚îú ${action}: ${count}\n`;
                }
            }

            message += '\nüë• *A√ß√µes por Admin:*\n';
            if (stats.adminActions) {
                for (const admin of stats.adminActions) {
                    message += `‚îú ${admin.username || admin.adminId}: ${admin.actionCount} a√ß√µes\n`;
                }
            }

            message += '\nüìÖ *Tend√™ncias:*\n';
            message += `‚îú A√ß√µes hoje: ${stats.actionsToday || 0}\n`;
            message += `‚îú A√ß√µes esta semana: ${stats.actionsWeek || 0}\n`;
            message += `‚îî A√ß√µes este m√™s: ${stats.actionsMonth || 0}`;

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_audit')]
                ]).reply_markup
            });
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Audit Stats] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar estat√≠sticas');
        }
    });

    // Handler para Exportar Auditoria
    bot.action('audit_export', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üì§ Preparando exporta√ß√£o de auditoria...');

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìÑ CSV', 'audit_export_csv')],
                [Markup.button.callback('üìä JSON', 'audit_export_json')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_audit')]
            ]);

            await ctx.editMessageText(
                'üì§ *Exportar Logs de Auditoria*\n\n' +
                'Escolha o formato de exporta√ß√£o:\n\n' +
                '‚Ä¢ *CSV* - Para an√°lise em planilhas\n' +
                '‚Ä¢ *JSON* - Para integra√ß√£o com sistemas\n\n' +
                '‚ö†Ô∏è O arquivo ser√° enviado via mensagem privada.',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Audit Export] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao preparar exporta√ß√£o');
        }
    });

    // Handler para Exportar CSV
    bot.action('audit_export_csv', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üìÑ Exportando para CSV...');

            const csv = await auditService.exportLogsToCSV();
            const buffer = Buffer.from(csv, 'utf-8');
            const filename = `audit_logs_${new Date().toISOString().split('T')[0]}.csv`;

            await ctx.replyWithDocument({
                source: buffer,
                filename: filename
            }, {
                caption: 'üìÑ Logs de auditoria exportados em formato CSV'
            });

            // Registrar a exporta√ß√£o
            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: AuditService.ActionTypes.DATA_EXPORTED,
                actionDescription: 'Exportou logs de auditoria (CSV)'
            });
        } catch (error) {
            logger.error(`[Audit Export CSV] Erro: ${error.message}`);
            await ctx.reply('‚ùå Erro ao exportar logs para CSV');
        }
    });

    // Handler para Exportar JSON
    bot.action('audit_export_json', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üìä Exportando para JSON...');

            const logs = await auditService.getAuditLogs({ limit: 10000 });
            const json = JSON.stringify(logs, null, 2);
            const buffer = Buffer.from(json, 'utf-8');
            const filename = `audit_logs_${new Date().toISOString().split('T')[0]}.json`;

            await ctx.replyWithDocument({
                source: buffer,
                filename: filename
            }, {
                caption: 'üìä Logs de auditoria exportados em formato JSON'
            });

            // Registrar a exporta√ß√£o
            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: AuditService.ActionTypes.DATA_EXPORTED,
                actionDescription: 'Exportou logs de auditoria (JSON)'
            });
        } catch (error) {
            logger.error(`[Audit Export JSON] Erro: ${error.message}`);
            await ctx.reply('‚ùå Erro ao exportar logs para JSON');
        }
    });

    // ========================================
    // HANDLERS DE MANUTEN√á√ÉO
    // ========================================

    // Toggle modo de manuten√ß√£o
    bot.action('toggle_maintenance', requireAdmin, async (ctx) => {
        try {
            // Immediate visual feedback
            await ctx.answerCbQuery('‚è≥ Alterando modo de manuten√ß√£o...');

            // Update message immediately with processing status
            await ctx.editMessageText(
                '‚è≥ *Processando altera√ß√£o...*\n\n' +
                'Alterando configura√ß√£o do modo de manuten√ß√£o.\n' +
                'Por favor, aguarde...',
                { parse_mode: 'Markdown' }
            );

            // Get current status from the system
            const config = await systemManagementService.getSystemConfig();
            const currentStatus = config.maintenanceMode || false;
            const newStatus = !currentStatus;

            // Set the new maintenance mode
            const result = await systemManagementService.setMaintenanceMode(newStatus,
                newStatus ? 'Sistema em manuten√ß√£o. Voltaremos em breve!' : null
            );

            // Also update through the MaintenanceMiddleware to ensure immediate effect
            const { MaintenanceMiddleware } = require('../middleware/maintenanceCheck');
            const maintenanceMiddleware = new MaintenanceMiddleware(redisClient, dbPool);
            await maintenanceMiddleware.setMaintenanceMode(newStatus,
                newStatus ? 'Sistema em manuten√ß√£o. Voltaremos em breve!' : null
            );

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'SYSTEM_MAINTENANCE_TOGGLE',
                actionDescription: `Modo manuten√ß√£o ${newStatus ? 'ATIVADO' : 'DESATIVADO'}`
            });

            // Notify all admins about the change
            const adminMessage = `‚ö†Ô∏è **ATEN√á√ÉO ADMINS**\n\nModo de manuten√ß√£o foi ${newStatus ? 'ATIVADO' : 'DESATIVADO'} por @${ctx.from.username || ctx.from.id}\n\n${newStatus ? 'üî¥ Sistema bloqueado para usu√°rios n√£o-admin' : 'üü¢ Sistema liberado para todos os usu√°rios'}`;

            for (const adminId of ADMIN_IDS) {
                try {
                    if (adminId !== ctx.from.id) { // Don't notify the admin who made the change
                        await bot.telegram.sendMessage(adminId, adminMessage, { parse_mode: 'Markdown' });
                    }
                } catch (e) {
                    // Ignore send errors
                }
            }

            // Show success message with clear status
            const successMessage = newStatus ?
                'üî¥ *MODO MANUTEN√á√ÉO ATIVADO*\n\n' +
                '‚Ä¢ Sistema bloqueado para usu√°rios n√£o-admin\n' +
                '‚Ä¢ Apenas administradores podem acessar\n' +
                '‚Ä¢ Mensagem exibida aos usu√°rios: "Sistema em manuten√ß√£o"' :
                'üü¢ *MODO MANUTEN√á√ÉO DESATIVADO*\n\n' +
                '‚Ä¢ Sistema liberado para todos os usu√°rios\n' +
                '‚Ä¢ Acesso normal restaurado\n' +
                '‚Ä¢ Todas as funcionalidades dispon√≠veis';

            await ctx.editMessageText(successMessage + '\n\n‚úÖ Altera√ß√£o realizada com sucesso!', {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ Atualizar Menu', 'sys_maintenance')],
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'adm_system')]
                ]).reply_markup
            });
        } catch (error) {
            logger.error(`[Toggle Maintenance] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao alterar modo manuten√ß√£o');
        }
    });

    // Reiniciar servi√ßos
    bot.action('restart_services', requireAdmin, async (ctx) => {
        try {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üì° Redis', 'restart_redis')],
                [Markup.button.callback('üóÑÔ∏è Banco de Dados', 'restart_database')],
                [Markup.button.callback('ü§ñ Telegram Bot', 'restart_telegram')],
                [Markup.button.callback('üîÑ Aplica√ß√£o', 'restart_app')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_maintenance')]
            ]);

            await ctx.editMessageText(
                'üîÑ *Reiniciar Servi√ßos*\n\n' +
                '‚ö†Ô∏è *ATEN√á√ÉO:* Reiniciar servi√ßos pode causar interrup√ß√£o tempor√°ria.\n\n' +
                'Escolha o servi√ßo para reiniciar:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Restart Services] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handlers individuais de restart
    bot.action(/restart_(redis|database|telegram|app)/, requireAdmin, async (ctx) => {
        const service = ctx.match[1];
        try {
            await ctx.answerCbQuery(`üîÑ Reiniciando ${service}...`);

            await systemManagementService.restartService(service);

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'SYSTEM_SERVICE_RESTART',
                actionDescription: `Servi√ßo ${service} reiniciado`
            });

            await ctx.editMessageText(
                `‚úÖ *Servi√ßo Reiniciado*\n\n` +
                `O servi√ßo *${service}* foi reiniciado com sucesso.\n\n` +
                `‚è±Ô∏è Timestamp: ${new Date().toLocaleString('pt-BR')}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'restart_services')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Restart ${service}] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao reiniciar');

            await ctx.editMessageText(
                `‚ùå *Erro ao Reiniciar*\n\n` +
                `N√£o foi poss√≠vel reiniciar o servi√ßo *${service}*.\n\n` +
                `Erro: ${error.message}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'restart_services')]
                    ]).reply_markup
                }
            );
        }
    });

    // Limpar logs antigos
    bot.action('clean_logs', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üóëÔ∏è Limpando logs...');

            const deletedCount = await systemManagementService.cleanOldLogs(30);

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'SYSTEM_LOGS_CLEANED',
                actionDescription: `${deletedCount} logs antigos removidos`
            });

            await ctx.editMessageText(
                `‚úÖ *Logs Limpos*\n\n` +
                `üóëÔ∏è ${deletedCount} logs antigos foram removidos.\n\n` +
                `Logs com mais de 30 dias foram exclu√≠dos.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_maintenance')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Clean Logs] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao limpar logs');
        }
    });

    // Otimizar banco de dados
    bot.action('optimize_db', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üîß Otimizando banco...');

            await ctx.editMessageText(
                'üîß *Otimiza√ß√£o em Progresso*\n\n' +
                '‚è≥ Executando VACUUM e ANALYZE...\n' +
                'Isso pode levar alguns minutos.',
                { parse_mode: 'Markdown' }
            );

            await systemManagementService.optimizeDatabase();

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'SYSTEM_DATABASE_OPTIMIZED',
                actionDescription: 'Banco de dados otimizado (VACUUM + ANALYZE + REINDEX)'
            });

            await ctx.editMessageText(
                `‚úÖ *Banco de Dados Otimizado*\n\n` +
                `As seguintes opera√ß√µes foram executadas:\n` +
                `‚Ä¢ VACUUM e ANALYZE em todas as tabelas\n` +
                `‚Ä¢ REINDEX das tabelas principais\n` +
                `‚Ä¢ Limpeza de conex√µes idle\n\n` +
                `O banco est√° otimizado e performando melhor!`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_maintenance')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Optimize DB] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao otimizar');

            await ctx.editMessageText(
                `‚ùå *Erro na Otimiza√ß√£o*\n\n` +
                `Erro: ${error.message}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_maintenance')]
                    ]).reply_markup
                }
            );
        }
    });

    // ========================================
    // HANDLERS DE BACKUP
    // ========================================

    // Criar backup agora
    bot.action('backup_now', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üíæ Criando backup...');

            await ctx.editMessageText(
                'üíæ *Criando Backup*\n\n' +
                '‚è≥ Gerando dump do banco de dados...\n' +
                'Isso pode levar alguns minutos.',
                { parse_mode: 'Markdown' }
            );

            const backup = await systemManagementService.createBackup();

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'SYSTEM_BACKUP_CREATED',
                actionDescription: `Backup criado: ${backup.timestamp} (${Math.round(backup.size / 1024 / 1024)}MB)`
            });

            await ctx.editMessageText(
                `‚úÖ *Backup Criado com Sucesso*\n\n` +
                `üìÅ Arquivo: \`${path.basename(backup.path)}\`\n` +
                `üìä Tamanho: ${Math.round(backup.size / 1024 / 1024)} MB\n` +
                `üïê Timestamp: ${backup.timestamp}\n\n` +
                `O backup foi salvo e comprimido.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_backup')]
                    ]).reply_markup
                }
            );
        } catch (error) {
            logger.error(`[Backup Now] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao criar backup');

            await ctx.editMessageText(
                `‚ùå *Erro ao Criar Backup*\n\n` +
                `Erro: ${error.message}\n\n` +
                `Verifique as permiss√µes e configura√ß√µes do banco.`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_backup')]
                    ]).reply_markup
                }
            );
        }
    });

    // Listar backups
    bot.action('list_backups', requireAdmin, async (ctx) => {
        try {
            await ctx.answerCbQuery('üìã Carregando backups...');

            const backups = await systemManagementService.listBackups();

            let message = 'üìã *Lista de Backups*\n\n';

            if (backups.length === 0) {
                message += '_Nenhum backup encontrado_';
            } else {
                for (const backup of backups.slice(0, 10)) {
                    message += `üìÅ *${backup.name}*\n`;
                    message += `‚îú Tamanho: ${backup.size} MB\n`;
                    message += `‚îú Criado: ${backup.created.toLocaleDateString('pt-BR')} ${backup.created.toLocaleTimeString('pt-BR')}\n`;
                    message += `‚îî Idade: ${backup.age} dias\n\n`;
                }

                if (backups.length > 10) {
                    message += `_...e mais ${backups.length - 10} backups_`;
                }
            }

            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_backup')]
                ]).reply_markup
            });
        } catch (error) {
            logger.error(`[List Backups] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao listar backups');
        }
    });

    // Configurar backups
    bot.action('backup_config', requireAdmin, async (ctx) => {
        try {
            // Get current backup configuration
            const config = await systemManagementService.getSystemConfig();

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback(
                    `${config.autoBackup ? '‚úÖ' : '‚ùå'} Backup Autom√°tico`,
                    'toggle_auto_backup'
                )],
                [Markup.button.callback('üìÖ Configurar Agendamento', 'set_backup_schedule')],
                [Markup.button.callback('üì¶ Per√≠odo de Reten√ß√£o: 30 dias', 'set_retention_period')],
                [Markup.button.callback('üîÑ Executar Backup Agora', 'backup_now')],
                [Markup.button.callback('‚óÄÔ∏è Voltar', 'sys_backup')]
            ]);

            await ctx.editMessageText(
                '‚öôÔ∏è *Configura√ß√£o de Backups*\n\n' +
                `‚Ä¢ **Backup Autom√°tico:** ${config.autoBackup ? '‚úÖ Ativado' : '‚ùå Desativado'}\n` +
                `‚Ä¢ **√öltimo Backup:** ${config.lastBackup ? new Date(config.lastBackup).toLocaleDateString('pt-BR') : 'Nunca'}\n` +
                `‚Ä¢ **Pr√≥ximo Backup:** ${config.nextBackup ? new Date(config.nextBackup).toLocaleDateString('pt-BR') : 'N√£o agendado'}\n` +
                `‚Ä¢ **Reten√ß√£o:** 30 dias\n` +
                `‚Ä¢ **Local:** ./backups/\n\n` +
                'Clique nas op√ß√µes abaixo para configurar:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Backup Config] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao carregar configura√ß√µes');
        }
    });

    // Handler para toggle de backup autom√°tico
    bot.action('toggle_auto_backup', requireAdmin, async (ctx) => {
        try {
            const newValue = await systemManagementService.toggleConfig('autoBackup');

            await auditService.logAdminAction({
                adminId: ctx.from.id,
                adminUsername: ctx.from.username,
                actionType: 'CONFIG_TOGGLED',
                actionDescription: `Backup autom√°tico ${newValue ? 'ativado' : 'desativado'}`
            });

            await ctx.answerCbQuery(`‚úÖ Backup autom√°tico ${newValue ? 'ativado' : 'desativado'}`);

            // Refresh the backup config screen
            return bot.handleUpdate({
                ...ctx.update,
                callback_query: { ...ctx.callbackQuery, data: 'backup_config' }
            });
        } catch (error) {
            logger.error(`[Toggle Auto Backup] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro ao alterar configura√ß√£o');
        }
    });

    // Handler para configurar agendamento de backup
    bot.action('set_backup_schedule', requireAdmin, async (ctx) => {
        try {
            await ctx.editMessageText(
                'üìÖ *Configurar Agendamento de Backup*\n\n' +
                'Escolha a frequ√™ncia dos backups autom√°ticos:\n\n' +
                '‚Ä¢ Di√°rio: Todo dia √†s 3:00 AM\n' +
                '‚Ä¢ Semanal: Toda segunda-feira √†s 3:00 AM\n' +
                '‚Ä¢ Mensal: Todo dia 1 √†s 3:00 AM',
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('üìÖ Di√°rio', 'schedule_daily')],
                        [Markup.button.callback('üìÖ Semanal', 'schedule_weekly')],
                        [Markup.button.callback('üìÖ Mensal', 'schedule_monthly')],
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'backup_config')]
                    ]).reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Set Backup Schedule] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    // Handler para definir per√≠odo de reten√ß√£o
    bot.action('set_retention_period', requireAdmin, async (ctx) => {
        try {
            await ctx.editMessageText(
                'üì¶ *Per√≠odo de Reten√ß√£o de Backups*\n\n' +
                'Escolha por quanto tempo manter os backups:\n\n' +
                'Backups mais antigos ser√£o removidos automaticamente.',
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('7 dias', 'retention_7')],
                        [Markup.button.callback('15 dias', 'retention_15')],
                        [Markup.button.callback('30 dias', 'retention_30')],
                        [Markup.button.callback('60 dias', 'retention_60')],
                        [Markup.button.callback('90 dias', 'retention_90')],
                        [Markup.button.callback('‚óÄÔ∏è Voltar', 'backup_config')]
                    ]).reply_markup
                }
            );
            await ctx.answerCbQuery();
        } catch (error) {
            logger.error(`[Set Retention Period] Erro: ${error.message}`);
            await ctx.answerCbQuery('‚ùå Erro');
        }
    });

    logger.info('[AdminCommands] Sistema administrativo completo registrado com todos os handlers');
};

module.exports = {
    registerAdminCommands,
    isAdmin
};